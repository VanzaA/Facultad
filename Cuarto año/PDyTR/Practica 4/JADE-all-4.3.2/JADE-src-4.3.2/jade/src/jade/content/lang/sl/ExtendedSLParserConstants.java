/* Generated By:JavaCC: Do not edit this line. ExtendedSLParserConstants.java */
package jade.content.lang.sl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExtendedSLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LBRACE = 5;
  /** RegularExpression Id. */
  int RBRACE = 6;
  /** RegularExpression Id. */
  int VARIABLE = 7;
  /** RegularExpression Id. */
  int INTEGER = 8;
  /** RegularExpression Id. */
  int HEXINTEGER = 9;
  /** RegularExpression Id. */
  int LONG = 10;
  /** RegularExpression Id. */
  int FLOATONE = 11;
  /** RegularExpression Id. */
  int FLOATTWO = 12;
  /** RegularExpression Id. */
  int FLOAT = 13;
  /** RegularExpression Id. */
  int WORD = 14;
  /** RegularExpression Id. */
  int STRING_LITERAL = 15;
  /** RegularExpression Id. */
  int PARAMETERNAME = 16;
  /** RegularExpression Id. */
  int PARAMETERNAME_STRING = 17;
  /** RegularExpression Id. */
  int DATETIME = 18;
  /** RegularExpression Id. */
  int PREFIXBYTELENGTHENCODEDSTRING = 19;
  /** RegularExpression Id. */
  int METASYMBOL = 20;
  /** RegularExpression Id. */
  int LBRACE2 = 25;
  /** RegularExpression Id. */
  int RBRACE2 = 26;
  /** RegularExpression Id. */
  int ACTION = 27;
  /** RegularExpression Id. */
  int REFERENTIALOP = 28;
  /** RegularExpression Id. */
  int MODALOP = 29;
  /** RegularExpression Id. */
  int ARITHMETICOP = 30;
  /** RegularExpression Id. */
  int ACTIONOP = 31;
  /** RegularExpression Id. */
  int ACTIONOPLL = 32;
  /** RegularExpression Id. */
  int UNARYLOGICALOP = 33;
  /** RegularExpression Id. */
  int BINARYLOGICALOP = 34;
  /** RegularExpression Id. */
  int QUANTIFIER = 35;
  /** RegularExpression Id. */
  int WORD2 = 36;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 37;
  /** RegularExpression Id. */
  int METASYMBOL2 = 38;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int OPERATORSTATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(\"",
    "\")\"",
    "<VARIABLE>",
    "<INTEGER>",
    "<HEXINTEGER>",
    "<LONG>",
    "<FLOATONE>",
    "<FLOATTWO>",
    "<FLOAT>",
    "<WORD>",
    "<STRING_LITERAL>",
    "<PARAMETERNAME>",
    "<PARAMETERNAME_STRING>",
    "<DATETIME>",
    "<PREFIXBYTELENGTHENCODEDSTRING>",
    "<METASYMBOL>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(\"",
    "\")\"",
    "\"action\"",
    "<REFERENTIALOP>",
    "<MODALOP>",
    "<ARITHMETICOP>",
    "<ACTIONOP>",
    "<ACTIONOPLL>",
    "\"not\"",
    "<BINARYLOGICALOP>",
    "<QUANTIFIER>",
    "<WORD2>",
    "<STRING_LITERAL2>",
    "<METASYMBOL2>",
  };

}
